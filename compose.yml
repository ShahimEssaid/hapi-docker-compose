services:

  postgresql:
    profiles:
      - hs-postgresql
    build:
      context: ${HS_PG_IMAGE_DIR:?err}
    stop_grace_period: 5m
    env_file:
      - config/compose-postgresql.env
      - config/compose-postgresql-project.env
      - config/compose-postgresql-local.env
    user: ${HS_UID:?err}:${HS_GID:?err}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - target: 5432
        published: ${HS_PG_PORT:?err}
        host_ip: ${HS_PG_HOST:?err}
    volumes:
      - type: bind
        source: ${HS_PG_CONTAINER_DIR:?err}/data-volume
        target: /var/lib/postgresql/data
  #      - type: bind
  #        source: /etc/passwd
  #        target: /etc/passwd
  #        read_only: true
  #

  elasticsearch:
    profiles:
      - hs-elasticsearch
    build:
      context: ${HS_ESREST_IMAGE_DIR:?err}
    stop_grace_period: 5m
    env_file:
      - config/compose-elasticsearch.evn
      - config/compose-elasticsearch-project.env
      - config/compose-elasticsearch-local.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    user: ${HS_UID:?err} #:${HS_GID:?err} to deal with keystore permissins when UID is not 1000. See: https://www.elastic.co/guide/en/elasticsearch/reference/7.13/docker.html#_configuration_files_must_be_readable_by_the_elasticsearch_user
    ports:
      - target: 9200
        host_ip: ${HS_ESREST_HOST:?err}
        published: ${HS_ESREST_PORT:?err}
    healthcheck:
      test: curl -u elastic:${HS_ESREST_PASSWORD:?err} -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - type: bind
        source: ${HS_ESREST_CONTAINER_DIR:?err}/data-volume
        target: /usr/share/elasticsearch/data

  kibana:
    profiles:
      - hs-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    stop_grace_period: 5m
    build:
      context: ${HS_KIBANA_IMAGE_DIR:?err}
    env_file:
      - config/compose-kibana.env
      - config/compose-kibana-project.env
      - config/compose-kibana-local.env
    ports:
      - target: 5601
        host_ip: ${HS_KIBANA_HOST:?err}
        published: ${HS_KIBANA_PORT:?err}

  hapi-build:
    profiles:
      - one-time
    build:
      context: ${HS_HAPI_BUILD_IMAGE_DIR:?err}
    user: ${HS_UID:?err}:${HS_GID:?err}
    env_file:
      - config/compose-hapi-build.env
      - config/compose-hapi-build-project.env
      - config/compose-hapi-build-local.env
    volumes:
      - type: bind
        source: ${HS_HAPI_BUILD_VOLUME:?err}
        target: /hapi-build
      - type: bind
        source: ${HS_HAPI_CONTAINER_DIR:?err}
        target: /hapi

  hapi:
    #    profiles:
    #      - disabled
    depends_on: # See https://github.com/docker/compose/issues/9795
      postgresql:
        condition: service_healthy  # The waiting for availability also happens in setup/docker_image/_hapi_default/copy/usr/local/bin/hapisetup-hapi-run
      elasticsearch:
        condition: service_healthy
    stop_grace_period: 10s
    build:
      context: ${HS_HAPI_IMAGE_DIR:?err}
    env_file:
      - config/compose-hapi.env
      - config/compose-hapi-project.env
      - config/compose-hapi-local.env
    ports:
      - target: ${HS_HAPI_PORT:?err}
        host_ip: ${HS_HAPI_HOST:?err}
        published: ${HS_HAPI_PORT:?err}
      - host_ip: ${HS_HAPI_DEBUG_HOST:?err}
        target: 8081
        published: ${HS_HAPI_DEBUG_PORT}
    user: ${HS_UID:?err}:${HS_GID:?err}
    volumes:
      - type: bind
        source: ${HS_HAPI_CONTAINER_DIR:?err}
        target: /hapi
#

  janusgraph:
    profiles:
      - hs-janus
    build:
      context: ${HS_JANUSGRAPH_IMAGE_DIR:?err}
    env_file:
      - config/compose-janusgraph.env
      - config/compose-janusgraph-project.env
      - config/compose-janusgraph-local.env
    ports:
      - target: 8182
        host_ip: ${HS_JANUSGRAPH_HOST:?err}
        published: ${HS_JANUSGRAPH_PORT:?err}
    healthcheck:
      test: [ "CMD", "bin/gremlin.sh", "-e", "scripts/remote-connect.groovy" ]
      interval: 10s
      timeout: 30s
      retries: 3

  cassandra:
    profiles:
      - hs-cassandra
    build:
      context: ${HS_CASSANDRA_IMAGE_DIR:?err}
    user: ${HS_UID:?err}:${HS_GID:?err}
    env_file:
      - config/compose-cassandra.env
      - config/compose-cassandra-project.env
      - config/compose-cassandra-local.env
    ports:
      - target: 9042
        host_ip: ${HS_CASSANDRA_HOST:?err}
        published: ${HS_CASSANDRA_PORT:?err}
    volumes:
      - type: bind
        source: ${HS_CASSANDRA_CONTAINER_DIR:?err}/data-volume
        target: /var/lib/cassandra
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 5s
      timeout: 5s
      retries: 5

#  opensearch:
#    profiles:
#      - disabled
#    build:
#      context: ${HS_OSREST_IMAGE_DIR:?err}
#    environment:
#      # https://github.com/opensearch-project/OpenSearch/issues/1598#issuecomment-978189603
#      # https://github.com/opensearch-project/opensearch-build/blob/main/docker/release/README.md#scenario-2-no-demo-certsconfigs--disable-security-on-both-opensearch-and-opensearch-dashboards
#      - discovery.type=single-node
#      - DISABLE_SECURITY_PLUGIN=true
#      - DISABLE_INSTALL_DEMO_CONFIG=true
#    user: ${HS_UID:?err}:${HS_GID:?err}
#    ports:
#      - target: 9200
#        host_ip: ${HS_OSREST_HOST:?err}
#        published: ${HS_OSREST_PORT:?err}
#      - target: 9600
#        host_ip: ${OSPERF_HOST:?err}
#        published: ${OSPERF_PORT:?err}
#    volumes:
#      - type: bind
#        source: ${HS_OSREST_CONTAINER_DIR:?err}/data-volume
#        target: /usr/share/opensearch/data
##
#  opensearch-dashboards:
#    profiles:
#      - disabled
#    depends_on:
#      - opensearch
#    build:
#      context: ${HS_OSDBS_IMAGE_DIR:?err}
#    environment:
#      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
#      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
#    ports:
#      - target: 5601
#        host_ip: ${HS_OSDBS_HOST:?err}
#        published: ${HS_OSDBS_PORT:?err}
##
